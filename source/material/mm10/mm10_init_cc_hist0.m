% c
% c
% c     ****************************************************************
% c     *                                                              *
% c     *                 subroutine mm10_init_cc_hist0                *
% c     *                                                              *
% c     *                       written by : mcm                       *
% c     *                                                              *
% c     *                   last modified: 11/26/13                    *
% c     *                                                              *
% c     *    Initialize the crystal history variables                  *
% c     *                                                              *
% c     ****************************************************************
% c
function [props, angles, history] = mm10_init_cc_hist0(props,...
    angles, history)
%       use mm10_defs
[max_slip_sys,max_uhard] = maxparamsCP;
%       implicit integer(a-z)
% c
%       type(crystal_props) :: props
%       integer :: a
%       double precision, dimension(3) :: angles
%       double precision, dimension(3,3) :: I
%       double precision, dimension(25+max_uhard) :: history
% c
        I = eye(3);
%  c           Stress
       history(1:6) = 0.0;
%  c           Angles
       history(7:9) = angles(1:3);
% c           Rotation
        history(10:18) = reshape(I, 9,1);
% c           D
       history(18+1:24) = 0.0;
% c           elaststrain
       history(24+1:30) = 0.0;
% c           slip_incs
       history(30+1:30+max_slip_sys) = 0.0;
% c           Hardening
      if (props.h_type == 1) % Simple voche
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_voche(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 2)% then % MTS
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_mts(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 3)% then % User
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                mm10_init_user(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 4)% then % ORNL
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_ornl(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 5)% then % AADP
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_aadp(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 6)% then %Omar
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_mts_omar(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 7)% then % MRR
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_mrr(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 8)% then % Dyson
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_dys(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 9)% Ran_HCP
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_DJGM(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      elseif (props.h_type == 12)% then % Plugin library
          AllOutput = mm10_plugin_lib(2,props,{props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)});
          props = AllOutput{1};
          history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard) = AllOutput{2};
          history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard) = AllOutput{3};
      elseif (props.h_type == 14)% then % halite
            [props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard), ...
                history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard)] =...
                 mm10_init_halite(props, history(30+max_slip_sys+1:30+max_slip_sys+props.num_hard),...
                 history(30+max_slip_sys+max_uhard+1:30+max_slip_sys+2*max_uhard));
      else
        [props] = mm10_unknown_hard_error(props);
      end
% 
%       return
end